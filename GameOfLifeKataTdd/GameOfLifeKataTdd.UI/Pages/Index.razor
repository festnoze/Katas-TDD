@page "/"

@using GameOfLifeKataTdd.Application.Exceptions
@using GameOfLifeKataTdd.Application.Models
@using GameOfLifeKataTdd.Application.Services
@using GameOfLifeKataTdd.UI.Models
@using System.Drawing
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="left-panel @NavMenuCssClass">
        <div class="top-row ps-3 navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="">Démineur TDD</a>
                <button title="Démineur TDD" class="navbar-toggler" @onclick="ToggleNavMenu"></button>
            </div>
        </div>
        <div @onclick="CreateGame">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-globe" aria-hidden="true" />
                        <span class="left-padding-title" aria-hidden="true">Nouveau jeu</span>
                        <input @bind="aliveCellsPercentage" class="left-padding-title modern-input" type="number" id="aliveCellsPercentageId" />
                    </NavLink>
                </div>
            </nav>
        </div>
        <div @onclick="PlayOrPauseGame">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <span class="oi @PlayPauseIconClass()" aria-hidden="true" />
                        <span class="left-padding-title" aria-hidden="true">@PlayPauseTitle()</span>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div @onclick="UpdateGame">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-media-step-forward" aria-hidden="true" />
                        <span class="left-padding-title" aria-hidden="true">Pas à pas</span>
                    </NavLink>
                </div>
            </nav>
        </div>    
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <div>
                            <span class="oi oi-resize-width" aria-hidden="true" />
                            <span class="left-padding-title" aria-hidden="true">Taille de la grille</span>
                        </div>
                        <div style="padding-left: 35px;">
                            <input disabled="@autoGridSizing" @bind-value="width" @bind-value:event="oninput" @onchange="ChangeGridSizeEvent" class="modern-input @GetTextColorClassDependingOnAutoGridSizing()" type="number" />
                            x
                            <input disabled="@autoGridSizing" @bind-value="height" @bind-value:event="oninput" @onchange="ChangeGridSizeEvent" class="modern-input @GetTextColorClassDependingOnAutoGridSizing()" type="number" />
                            <button class="modern-button" @onclick="ChangeAutoGridSizing">@AutoGridSizingButtonTitle()</button>
                        </div>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <div>
                            <span class="oi oi-crop" aria-hidden="true" />
                            <span class="left-padding-title right-padding-title" aria-hidden="true">Taille des celulles</span>
                            <input @bind-value="inputCellSize" @bind-value:event="oninput" @onchange="ChangeCellSize" class="modern-input" type="number" />
                        </div>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <div>
                            <span class="oi oi-flash" aria-hidden="true" style="width: 20px; text-align: center;" />
                            <span class="left-padding-title" aria-hidden="true">Vitesse de raffraichissement</span>
                            <div class="slider-container">
                                <span class="oi oi-flash" aria-hidden="true" style="text-align: center; color:rgb(5, 18, 60)" />
                                <span style="color:white;">min.</span>
                                <input type="range" min="1" max="10" step="1" id="speedSlider" @bind="speedSliderValue" />
                                <span style="color:rgb(250, 8, 20);">max.</span>
                            </div>
                        </div>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <div>
                            <span class="oi oi-brush" aria-hidden="true" />
                            <span class="left-padding-title" aria-hidden="true">Insérer</span>
                            <select @bind="selectedForm" class="modern-select">
                                @foreach (var form in availableForms)
                                {
                                    <option value="@form">@form</option>
                                }
                            </select>
                        </div>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-layers" aria-hidden="true" />
                        <span class="left-padding-title" aria-hidden="true">Génération</span>
                        <span style="font-size:18px; font-style:italic"> n°@GetGenerationNumber()</span>
                    </NavLink>
                </div>
            </nav>
        </div>
        <div>
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="action-btn" href="" Match="NavLinkMatch.All">
                        <div>
                            <span class="oi oi-bar-chart" aria-hidden="true" style="width: 20px; text-align: center;" />
                            <span class="left-padding-title" aria-hidden="true">Vitesse moyenne</span>
                            <span class="left-padding-title" style="font-size:16px; font-style:italic">@refreshCountPerSecond gen/sec.</span>
                        </div>
                    </NavLink>
                </div>
            </nav>
        </div>
    </div>
    <div id="rightPanelId" class="right-panel">
        @if (showPopup)
        {
            <div class="popup">
                @popupMessage
                <button @onclick="ClosePopupAndRestart">Fin!</button>
                <button @onclick="ClosePopup">Continuer</button>
            </div>
        }

        <div class="minesweeper-grid">
            <div id="gridId" class="grid-border">
                @for (int y = 0; y < height; y++)
                {
                    int savedY = y;
                    <div class="grid-row">
                        @for (int x = 0; x < width; x++)
                        {
                            int savedX = x;
                            <div id="cellId" class="cell @AliveCellClass(savedX, savedY)" @onclick="() => InsertNewFormEvent(savedX, savedY)">
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    #region Properties

    private GameOfLifeService service = new GameOfLifeService();
    private bool showPopup = false;
    private string popupMessage = "";
    private int width = 0;
    private int height = 0;
    private int aliveCellsPercentage = 0;
    private int cellSize = 40;
    private int inputCellSize = 25;
    private const int gridPadding = 50;
    private bool gamePaused = true; 
    private Timer gameTimer;
    private int generationNumber = -1;
    private DateTime lastSpeedChangeTime = DateTime.Now;
    private int lastGenerationWithoutSpeedChange = -1;
    private bool autoGridSizing = true;
    private bool isMaxSpeed => speedSliderValue == 10;
    private decimal refreshCountPerSecond = 0;
    private List<string> availableForms = new List<string>();
    private Dictionary<string, Grid> formsDictionary = new Dictionary<string, Grid>();
    private string selectedForm = "";
    private int speedSliderValue
    {
        get => _speedSliderValue; 
        set
        {
            if (_speedSliderValue != value)
            {
                _speedSliderValue = value;
                ChangeTimerInterval();
            }
        }
    }
    private int _speedSliderValue = 5;

    #endregion

    #region Evenements

    protected override void OnInitialized()
    {
        // Fulfill forms dictionary
        formsDictionary.Add("1 cellulle", new Grid(1, 1, new Point(0, 0)));
        formsDictionary.Add("Glider (3x3)", new Grid(3, 3, new Point(1, 0), new Point(2, 1), new Point(0, 2), new Point(1, 2), new Point(2, 2)));
        formsDictionary.Add("Light SpaceShip (4x5)", new Grid(4, 5, new Point(1, 0), new Point(0, 1), new Point(0, 2), new Point(0, 3), new Point(0, 4), new Point(1, 4), new Point(2, 4), new Point(3, 0), new Point(3, 3)));
        formsDictionary.Add("Medium SpaceShip (5x6)", new Grid(5, 6, new Point(0, 2), new Point(1, 0), new Point(1, 4), new Point(2, 5), new Point(3, 0), new Point(3, 5), new Point(4, 1), new Point(4, 2), new Point(4, 3), new Point(4, 4), new Point(4, 5)));
        formsDictionary.Add("Heavy SpaceShip (5x7)", new Grid(5, 7, new Point(0, 2), new Point(0, 3), new Point(1, 0), new Point(1, 5), new Point(2, 6), new Point(3, 0), new Point(3, 6), new Point(4, 1), new Point(4, 2), new Point(4, 3), new Point(4, 4), new Point(4, 5), new Point(4, 6)));
        formsDictionary.Add("Efface 5x5", new Grid(5, 5));
        formsDictionary.Add("Efface 10x10", new Grid(10, 10));
        formsDictionary.Add("Glider gun horizontal (37x10)", 
            new Grid(37, 10, 
                new Point(1, 5), new Point(1, 6), new Point(2, 5), new Point(2, 6),
                new Point(11, 5), new Point(11, 6), new Point(11, 7), new Point(12, 4), new Point(12, 8),
                new Point(13, 3), new Point(13, 9), new Point(14, 3), new Point(14, 9), new Point(15, 6),
                new Point(16, 4), new Point(16, 8), new Point(17, 5), new Point(17, 6), new Point(17, 7),
                new Point(18, 6), new Point(21, 3), new Point(21, 4), new Point(21, 5), new Point(22, 3),
                new Point(22, 4), new Point(22, 5), new Point(23, 2), new Point(23, 6), new Point(25, 1),
                new Point(25, 2), new Point(25, 6), new Point(25, 7), new Point(35, 3), new Point(35, 4),
                new Point(36, 3), new Point(36, 4)));
        formsDictionary.Add("Glider gun vertical (10x37)",
            new Grid(10, 37,
                new Point(5, 1), new Point(6, 1), new Point(5, 2), new Point(6, 2),
                new Point(5, 11), new Point(6, 11), new Point(7, 11), new Point(4, 12), new Point(8, 12),
                new Point(3, 13), new Point(9, 13), new Point(3, 14), new Point(9, 14), new Point(6, 15),
                new Point(4, 16), new Point(8, 16), new Point(5, 17), new Point(6, 17), new Point(7, 17),
                new Point(6, 18), new Point(3, 21), new Point(4, 21), new Point(5, 21), new Point(3, 22),
                new Point(4, 22), new Point(5, 22), new Point(2, 23), new Point(6, 23), new Point(1, 25),
                new Point(2, 25), new Point(6, 25), new Point(7, 25), new Point(3, 35), new Point(4, 35),
                new Point(3, 36), new Point(4, 36)));



        // Fulfill available forms from dictionary
        availableForms.Add("Aucun");
        availableForms.AddRange(formsDictionary.Keys);

        // Select first item in forms insertion selection dropdown list
        selectedForm = availableForms.First();


        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ComputeGridSize();
            gameTimer = new Timer(UpdateGameTimer, null, 0, CalculateRefreshInterval());
        }

        if (isMaxSpeed && !gamePaused)
            UpdateGame();
    }

    private void ChangeGridSizeEvent(ChangeEventArgs e)
    {
        if (!gamePaused)
            PlayOrPauseGame();

        CreateGame();
    }

    private void InsertNewFormEvent(int x, int y)
    {
        if (selectedForm != "Aucun")
        {
            // Insérer la forme sélectionnée
            service.InsertForm(x, y, formsDictionary[selectedForm]);
        }
    }

    #endregion

    #region Methods

    private void CreateGame()
    {
        service.CreateNewGameOfLifeGrid(width, height, aliveCellsPercentage);
        generationNumber = service.GetGenerationNumber();
        lastGenerationWithoutSpeedChange = generationNumber;
        lastSpeedChangeTime = DateTime.Now;
        refreshCountPerSecond = 0;
    }

    private string PlayPauseTitle()
    {
        if (gamePaused)
            return "Play";

        return "Pause";
    }

    private void PlayOrPauseGame()
    {
        gamePaused = !gamePaused;

        ChangeTimerInterval();
    }

    private void ChangeTimerInterval()
    {
        if (isMaxSpeed || gamePaused)
            gameTimer.Change(Timeout.Infinite, 0);
        else
            gameTimer.Change(0, CalculateRefreshInterval());

        if (!gamePaused)
        {
            lastGenerationWithoutSpeedChange = generationNumber;
            lastSpeedChangeTime = DateTime.Now;
            refreshCountPerSecond = 0;
        }

    }

    private int CalculateRefreshInterval()
    {
        return 1000 / speedSliderValue;
    }

    private void UpdateGameTimer(object? state)
    {
        if (!gamePaused && !isMaxSpeed)
            InvokeAsync(() => UpdateGame());
    }

    private string PlayPauseIconClass()
    {
        if (gamePaused)
            return "oi-media-play";

        return "oi-media-pause";
    }

    private async Task ChangeCellSize()
    {
        if (inputCellSize != cellSize)
        {
            cellSize = inputCellSize;
            await ComputeGridSize();
        }
    }

    private void UpdateGame()
    {
        service.UpdateGame();
        generationNumber = service.GetGenerationNumber();

        refreshCountPerSecond = 
            Math.Round(Convert.ToDecimal(
            (generationNumber - lastGenerationWithoutSpeedChange) 
            / (DateTime.Now - lastSpeedChangeTime).TotalSeconds), 2);

        StateHasChanged();
    }

    private string GetGenerationNumber()
    {
        return generationNumber.ToString();
    }

    private string AutoGridSizing()
    {
        return autoGridSizing ? "true" : "false";
    }

    private void ChangeAutoGridSizing()
    {
        autoGridSizing = !autoGridSizing;
    }

    private string AutoGridSizingButtonTitle()
    {
        if (autoGridSizing)
            return "Auto";
        else
            return "Manuel";
    }

    private string AliveCellClass(int x, int y)
    {
        try
        {
            return service.IsCellAlive(x, y) ? "alivecell" : "deadcell";

        }
        catch (OutOfRangeCellCoordonatesException)
        {}
        catch(Exception)
        {
            throw;
        }
        return "deadcell";
    }

    private void ClosePopupAndRestart()
    {
        ClosePopup();
        CreateGame();
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private async Task ComputeGridSize()
    {
        var hasSizeChanged = await CalculateGridAutoSize();
        ChangeGridSizeEvent(null!);
        StateHasChanged();
    }

    private async Task<bool> CalculateGridAutoSize()
    {
        var panelDimensions = await JSRuntime.InvokeAsync<Dimension>("getDimensions", "rightPanelId");

        // Calculate Width and Height taking into account the cellSize (size of each cell in pixels)
        var newWidth = (panelDimensions.Width - 2 * gridPadding) / cellSize;
        var newHeight = (panelDimensions.Height - 2 * gridPadding) / cellSize;

        var hasSizeChanged = newWidth != width || newHeight != height;

        if (hasSizeChanged)
        {
            width = newWidth;
            height = newHeight;
        }

        return hasSizeChanged;
    }

    public string GetTextColorClassDependingOnAutoGridSizing()
    {
        if (autoGridSizing)
            return "white-text";
        else
            return "black-text";
    }

    public void Dispose()
    {
        gameTimer.Dispose();
    }

    private bool collapseNavMenu = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    #endregion
}

<script>
    function getDimensions(elementId) {
        var element = document.getElementById(elementId);
        if (element) {
            return { width: element.offsetWidth, height: element.offsetHeight };
        } 
        else {
            return { width: 0, height: 0 };
        }
    }
</script>

<style>
    .container {
        display: flex;
        height: 100vh; /* Utilisez la hauteur de la fenêtre */
    }

    .left-panel {
        font-family: Calibri;
        font-size: 20px;
        width: 350px;
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%,rgb(5, 8, 30) 90%);
    }

    .action-btn {
        display: block;
        padding: 0.3rem 0.3rem;
        /* color: #0d6efd; */
        text-decoration: none;
        transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out;
        color: #ffefcf;
    }

    .left-padding-title {
        padding-left: 10px;
    }

    .right-padding-title {
        padding-right: 10px;
    }

    .right-panel {
        flex-grow: 1.1;
        background-color: rgb(115, 159, 253);
    }

    .minesweeper-grid {
        display: inline-block;
        padding-left: @(gridPadding)px;
        padding-right: @(gridPadding)px;
        padding-top: @(gridPadding/2)px;
        padding-bottom: @(gridPadding/2)px;
        background-color: linen;
    }

    .grid-border {
        border: 2px dotted rgb(115, 139, 193);
        padding: 5px;
    }

    .grid-row {
        display: flex;
    }

    .cell {
        width: @(cellSize)px;
        height: @(cellSize)px;
        /* border: 1px solid #333333; */
        text-align: center;
        line-height: @(cellSize)px;
        cursor: pointer;
    }

    .alivecell {
        background-color: rgb(80 77 84);
        border-radius: 35%; /* Coins arrondis */
    }

    .deadcell {
        background-color: linen;
    }

    .popup {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background-color: white;
        border: 1px solid black;
        z-index: 1000;
    }

    .navbar-toggler {
        display: none;
    }

    .collapse {
        display: block;
    }

    .modern-button {
        /* Style de base */
        background-color: #5C5FF0; /* Couleur de fond */
        color: white; /* Couleur du texte */
        margin-left: 5px;
        padding: 6px 7px; /* Espacement intérieur */
        border: none; /* Aucune bordure */
        border-radius: 10px; /* Coins arrondis */
        cursor: pointer; /* Curseur de pointeur */
        transition: background-color 0.3s; /* Transition pour l'effet de survol */
        font-size: 14px; /* Taille de la police */
    }

    .modern-input {
        font-family: Calibri;
        font-weight: bold;
        font-size: 14px;
        width: 50px;
        border: none; /* Aucune bordure */
        border-radius: 4px; /* Coins arrondis */
        padding: 4px 5px; /* Espacement intérieur */
        text-align: right;
        transition: background-color 0.3s; /* Transition pour l'effet de survol */
    }

    .black-text {
        color: black;
    }


    .white-text {
        color: white;
    }

    .modern-button:hover {
            background-color: #ECCF90; /* Couleur de fond au survol */
            color: black;
    }

    .slider-container {
        display: flex;
        align-items: center;
    }

    .slider-container span {
        margin: 0 10px;
    }

    .modern-select {
        width: 110px;
        text-align: left;
        margin-left: 7px;
        padding: 5px 10px; /* Espacement intérieur pour un meilleur confort visuel */
        border-radius: 10px; /* Coins arrondis */
        border: 1px solid #ccc; /* Bordure légère */
        background-color: white; /* Couleur de fond */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Ombre portée légère pour un effet en relief */
        font-size: 14px; /* Taille de police */
        color: #333; /* Couleur du texte */
        cursor: pointer; /* Curseur de pointeur pour indiquer qu'il s'agit d'un élément interactif */
    }

    .modern-select::-ms-expand {
        display: none;
    }

    .modern-select:focus {
        outline: none; /* Supprime l'outline par défaut lors du focus */
        border-color: #66afe9; /* Change la couleur de la bordure lors du focus */
    }

    .modern-select option {
        padding: 5px; /* Espacement intérieur pour les options */
    }

</style>

