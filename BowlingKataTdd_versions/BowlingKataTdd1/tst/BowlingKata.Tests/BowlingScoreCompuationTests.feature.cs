// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BowlingKata.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalculDuScoreApresUnePartieCompleteFeature : object, Xunit.IClassFixture<CalculDuScoreApresUnePartieCompleteFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BowlingScoreCompuationTests.feature"
#line hidden
        
        public CalculDuScoreApresUnePartieCompleteFeature(CalculDuScoreApresUnePartieCompleteFeature.FixtureData fixtureData, BowlingKata_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "", "Calcul du score après une partie complète", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Calcul du score en renversant le même nombre de quilles à chaque lancer")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Calcul du score en renversant le même nombre de quilles à chaque lancer")]
        [Xunit.InlineDataAttribute("0", "20", "0", new string[0])]
        [Xunit.InlineDataAttribute("2", "20", "40", new string[0])]
        [Xunit.InlineDataAttribute("5", "21", "150", new string[0])]
        [Xunit.InlineDataAttribute("10", "12", "300", new string[0])]
        public void CalculDuScoreEnRenversantLeMemeNombreDeQuillesAChaqueLancer(string pinsDown, string rollsCount, string expectedScore, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("pinsDown", pinsDown);
            argumentsOfScenario.Add("rollsCount", rollsCount);
            argumentsOfScenario.Add("expectedScore", expectedScore);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul du score en renversant le même nombre de quilles à chaque lancer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 5
    testRunner.When(string.Format("je renverse {0} quilles pour chacun des {1} lancers", pinsDown, rollsCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 6
    testRunner.Then("le calcul du score final fini en échec: non", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 7
    testRunner.And(string.Format("le score final devrait être {0}", expectedScore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Calcul du score après un spare unique")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Calcul du score après un spare unique")]
        [Xunit.InlineDataAttribute("6", "4", "3", "16", new string[0])]
        [Xunit.InlineDataAttribute("7", "3", "4", "18", new string[0])]
        [Xunit.InlineDataAttribute("5", "5", "5", "20", new string[0])]
        [Xunit.InlineDataAttribute("9", "1", "0", "10", new string[0])]
        public void CalculDuScoreApresUnSpareUnique(string firstPinsDownCount, string secondPinsDownCount, string thirdPinsDownCount, string awaitedScore, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstPinsDownCount", firstPinsDownCount);
            argumentsOfScenario.Add("secondPinsDownCount", secondPinsDownCount);
            argumentsOfScenario.Add("thirdPinsDownCount", thirdPinsDownCount);
            argumentsOfScenario.Add("awaitedScore", awaitedScore);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul du score après un spare unique", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 18
    testRunner.When(string.Format("je renverse {0} quilles", firstPinsDownCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 19
    testRunner.And(string.Format("je renverse {0} quilles", secondPinsDownCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 20
    testRunner.And(string.Format("je renverse {0} quilles", thirdPinsDownCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 21
    testRunner.And("je ne renverse aucunes quilles lors des lancers suivants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 22
    testRunner.Then(string.Format("le score final devrait être {0}", awaitedScore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Calcul du score après un strike unique")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Calcul du score après un strike unique")]
        [Xunit.InlineDataAttribute("6", "3", "28", new string[0])]
        [Xunit.InlineDataAttribute("7", "0", "24", new string[0])]
        public void CalculDuScoreApresUnStrikeUnique(string firstFollowingPinsDownCount, string secondFollowingPinsDownCount, string expectedScore, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstFollowingPinsDownCount", firstFollowingPinsDownCount);
            argumentsOfScenario.Add("secondFollowingPinsDownCount", secondFollowingPinsDownCount);
            argumentsOfScenario.Add("expectedScore", expectedScore);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul du score après un strike unique", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 33
    testRunner.When("je fais un strike", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 34
    testRunner.And(string.Format("je renverse {0} quilles", firstFollowingPinsDownCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 35
    testRunner.And(string.Format("je renverse {0} quilles", secondFollowingPinsDownCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 36
    testRunner.And("je ne renverse aucunes quilles lors des lancers suivants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 37
    testRunner.Then(string.Format("le score final devrait être {0}", expectedScore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calcul du score pour un spare après un strike")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Calcul du score pour un spare après un strike")]
        public void CalculDuScorePourUnSpareApresUnStrike()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul du score pour un spare après un strike", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 46
    testRunner.When("je fais un strike", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 47
    testRunner.And("je renverse 7 quilles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 48
    testRunner.And("je renverse 3 quilles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 49
    testRunner.And("je renverse 4 quilles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 50
    testRunner.And("je ne renverse aucunes quilles lors des lancers suivants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 51
    testRunner.Then("le score final devrait être 38", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Vérification de l\'état final du jeu")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Vérification de l\'état final du jeu")]
        [Xunit.InlineDataAttribute("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "0", new string[0])]
        [Xunit.InlineDataAttribute("0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1", "46", new string[0])]
        public void VerificationDeLetatFinalDuJeu(string rollResults, string expectedScore, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("rollResults", rollResults);
            argumentsOfScenario.Add("expectedScore", expectedScore);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vérification de l\'état final du jeu", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 55
    testRunner.When(string.Format("je joue les lancers suivants {0}", rollResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 56
    testRunner.Then(string.Format("le score final devrait être {0}", expectedScore), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Tenter d\'ajouter un lancer après la fin du jeu")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du score après une partie complète")]
        [Xunit.TraitAttribute("Description", "Tenter d\'ajouter un lancer après la fin du jeu")]
        [Xunit.InlineDataAttribute("0", "20", "non", new string[0])]
        [Xunit.InlineDataAttribute("2", "20", "non", new string[0])]
        [Xunit.InlineDataAttribute("5", "22", "oui", new string[0])]
        [Xunit.InlineDataAttribute("10", "13", "oui", new string[0])]
        public void TenterDajouterUnLancerApresLaFinDuJeu(string pinsDown, string rolls, string fails, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("pinsDown", pinsDown);
            argumentsOfScenario.Add("rolls", rolls);
            argumentsOfScenario.Add("fails", fails);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenter d\'ajouter un lancer après la fin du jeu", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
    testRunner.Given("je commence une nouvelle partie de bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line hidden
#line 65
    testRunner.When(string.Format("je renverse {0} quilles pour chacun des {1} lancers", pinsDown, rolls), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 66
    testRunner.Then(string.Format("le calcul du score final fini en échec: {0}", fails), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculDuScoreApresUnePartieCompleteFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculDuScoreApresUnePartieCompleteFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
